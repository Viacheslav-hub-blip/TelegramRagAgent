import asyncio
import os
import random
from pathlib import Path
from typing import List
from src.telegram_bot.config import some_questions_for_examples, TAVILY_API_KEY
# AIOGRAM
from aiogram import Router, F, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
# LANGCHAIN
from langchain_community.tools import TavilySearchResults
# TELEGRAMBOT
from src.telegram_bot.create_bot import bot
# SERVICES
from src.telegram_bot.services.llm_model_service import LLMModelService
from src.telegram_bot.services.vectore_store_service import VecStoreService
from src.telegram_bot.services.retriever_service import RetrieverSrvice
from src.telegram_bot.services.documents_saver_service import DocumentsSaver
from src.telegram_bot.services.pdf_reader_service import PDFReader
# AGENT
from src.telegram_bot.langchain_model_init import model_for_brief_content

os.environ["TAVILY_API_KEY"] = TAVILY_API_KEY
os.environ["NUMBA_NUM_THREADS"] = "1"
DOWNLOAD_PATH = "/src/telegram_bot/temp_downloads"

router = Router()
tool = TavilySearchResults(k=3)
llm_model_service = LLMModelService(model_for_brief_content)


class LoadFile(StatesGroup):
    file_path = State()
    language = State()
    file_name = State()
    process_file = State()


def _get_content(input_format, language, file_path) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    file_reader = PDFReader(file_path)
    content = file_reader.get_cleaned_content()
    return content


def _save_doc_content(input_format: str, file_path: str, language: List[str], user_id: str,
                      file_name: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    content = _get_content(input_format, language, file_path)
    retriever = RetrieverSrvice.get_or_create_retriever(user_id)
    vecstore_store_service = VecStoreService(llm_model_service, retriever, content, file_name)
    summarize_content = vecstore_store_service.save_docs_and_add_in_retriever()
    return summarize_content


async def _save_file(file_id) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    destination = rf"/home/alex/PycharmProjects/pythonProject/src/temp_downloads/{file_id}.pdf"
    await Bot.download(bot, file_id, destination)
    return destination


@router.message(lambda message: message.document is not None)
async def handle_file(message: Message, state: FSMContext):
    if message.document.mime_type == "application/pdf":
        file_id = message.document.file_id
        res_destination = await _save_file(file_id)
        await state.update_data(file_path=res_destination)
        await state.update_data(file_name=message.document.file_name)
        await state.set_state(LoadFile.language)
        await message.answer(f"üåç–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Ñ–∞–∏–ª–∞. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:\neng\nrus")
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å PDF —Ñ–∞–π–ª–∞–º–∏üìù")


@router.message(F.text, LoadFile.language)
async def choose_file_language(message: Message, state: FSMContext):
    if message.text.lower() in ["eng", "rus"]:
        await state.update_data(language=message.text.lower())
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –º–Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ãüí°. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
            "–ö–æ–≥–¥–∞ —è –∑–∞–∫–æ–Ω—á—É –æ–±—Ä–∞–±–æ—Ç–∫—É, —è –Ω–∞–ø–∏—à—É. –ü–æ–∫–∞ —è —á–∏—Ç–∞—é —Ñ–∞–π–ª, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {some_questions_for_examples[random.randint(0, len(some_questions_for_examples) - 1)]}"
        )
        await state.set_state(LoadFile.process_file)

        loop = asyncio.get_event_loop()
        data = await state.get_data()
        result = await loop.run_in_executor(None,
                                            _save_doc_content,
                                            'pdf',
                                            data.get("file_path"),
                                            [data.get("language")],
                                            str(message.from_user.id),
                                            data.get("file_name"))
        await message.answer(result)
        await state.clear()
    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–æ—Ç —è–∑—ã–∫")


@router.message(Command("clear_documents"))
async def clear_documents(msg: Message):
    VecStoreService.clear_vector_stores(str(msg.from_user.id))
    DocumentsSaver.delete_file_with_files_ids_names(str(msg.from_user.id))
    DocumentsSaver.clear_user_directory(str(msg.from_user.id))
    await msg.answer("–í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ãüóë")
